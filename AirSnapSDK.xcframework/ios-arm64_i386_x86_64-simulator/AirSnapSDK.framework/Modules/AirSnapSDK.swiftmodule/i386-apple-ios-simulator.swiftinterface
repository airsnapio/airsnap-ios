// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.5.2 (swiftlang-1300.0.47.5 clang-1300.0.29.30)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name AirSnapSDK
import CommonCrypto
import Foundation
import SQLite3
import Swift
import UIKit
import _Concurrency
@objc public enum PrivacyRule : Swift.Int {
  case mask
  case unmask
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objc public class AirSnap : ObjectiveC.NSObject {
  @objc public static var sessionId: Swift.String? {
    @objc get
  }
  @objc public static var userId: Swift.String {
    @objc get
  }
  @objc public static func start(withAppKey: Swift.String, privacyRule: AirSnapSDK.PrivacyRule = .mask)
  @objc public static func stop()
  @objc public static func setUser(id: Swift.String?)
  public static func captureException(issue: AirSnapSDK.IssueInput, level: Swift.String = "error", context: [Swift.String : ObjectiveC.NSObject]? = nil)
  public static func captureException(error: Swift.Error, level: Swift.String = "error")
  public static func capture(error: Swift.Error)
  public static func capture(exception: Foundation.NSException)
  public static func capture(message: Swift.String)
  @objc deinit
}
public struct IssueInput {
  public init(platform: Swift.String, summary: Swift.String, data: Swift.Dictionary<Swift.String, Any>? = nil)
}
extension AirSnapSDK.PrivacyRule : Swift.Equatable {}
extension AirSnapSDK.PrivacyRule : Swift.Hashable {}
extension AirSnapSDK.PrivacyRule : Swift.RawRepresentable {}
